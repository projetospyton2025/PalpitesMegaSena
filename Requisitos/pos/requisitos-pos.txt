preciso que vc ajuste as informações no front end conforme vem da api...

vou trazer aqui as informações das duas.. 

////////////INFORMAÇÕES MOSTRADA NO FRONTEND///////////////////////
Seus Jogos
Resultado do Concurso: 1

Data do Sorteio: 11/03/1996

Local: Auditório em Brasília, DF -
Números por Ordem de Sorteio:
04 05 30 33 41 52
Números em Ordem Crescente:
04 05 30 33 41 52
Premiações:
undefined undefined ganhadores R$ 0,00
undefined undefined ganhadores R$ 39.158,92
undefined undefined ganhadores R$ 330,21
Informações Adicionais:

Valor Arrecadado: R$ 0,00
////////////INFORMAÇÕES MOSTRADA NO FRONTEND///////////////////////


API - 1 - https://loteriascaixa-api.herokuapp.com/api/megasena/1
1	
loteria	"megasena"
concurso	2829
data	"15/02/2025"
local	"ESPAÇO DA SORTE em SÃO PAULO, SP"
dezenasOrdemSorteio	
0	"46"
1	"38"
2	"13"
3	"56"
4	"22"
5	"51"
dezenas	
0	"13"
1	"22"
2	"38"
3	"46"
4	"51"
5	"56"
trevos	[]
timeCoracao	null
mesSorte	null
premiacoes	
0	
descricao	"6 acertos"
faixa	1
ganhadores	0
valorPremio	0.0JS:0
1	
descricao	"5 acertos"
faixa	2
ganhadores	90
valorPremio	52384.82
2	
descricao	"4 acertos"
faixa	3
ganhadores	6377
valorPremio	1056.16
estadosPremiados	[]
observacao	""
acumulou	true
proximoConcurso	2830
dataProximoConcurso	"18/02/2025"
localGanhadores	[]
valorArrecadado	8.095084E7JS:80950840
valorAcumuladoConcurso_0_5	8.18228093E7JS:81822809.3
valorAcumuladoConcursoEspecial	1.299236218E7JS:12992362.18
valorAcumuladoProximoConcurso	8.18228093E7JS:81822809.3
valorEstimadoProximoConcurso	9.0E7JS:90000000



API - 2  - https://servicebus2.caixa.gov.br/portaldeloterias/api/megasena/1
acumulado	true
dataApuracao	"11/03/1996"
dataProximoConcurso	""
dezenasSorteadasOrdemSorteio	
0	"41"
1	"05"
2	"04"
3	"52"
4	"30"
5	"33"
exibirDetalhamentoPorCidade	true
id	null
indicadorConcursoEspecial	1
listaDezenas	
0	"04"
1	"05"
2	"30"
3	"33"
4	"41"
5	"52"
listaDezenasSegundoSorteio	null
listaMunicipioUFGanhadores	[]
listaRateioPremio	
0	
descricaoFaixa	"6 acertos"
faixa	1
numeroDeGanhadores	0
valorPremio	0.0JS:0
1	
descricaoFaixa	"5 acertos"
faixa	2
numeroDeGanhadores	17
valorPremio	39158.92
2	
descricaoFaixa	"4 acertos"
faixa	3
numeroDeGanhadores	2016
valorPremio	330.21
listaResultadoEquipeEsportiva	null
localSorteio	"Auditório"
nomeMunicipioUFSorteio	"Brasília, DF"
nomeTimeCoracaoMesSorte	""
numero	1
numeroConcursoAnterior	0
numeroConcursoFinal_0_5	5
numeroConcursoProximo	2
numeroJogo	2
observacao	""
premiacaoContingencia	null
tipoJogo	"MEGA_SENA"
tipoPublicacao	3
ultimoConcurso	true
valorArrecadado	0.0JS:0
valorAcumuladoConcurso_0_5	0.0JS:0
valorAcumuladoConcursoEspecial	0.0JS:0
valorAcumuladoProximoConcurso	1714650.23
valorEstimadoProximoConcurso	0.0JS:0
valorSaldoReservaGarantidora	0.0JS:0
valorTotalPremioFaixaUm	0.0JS:0



Diretório: J:\Meu DrIve\ProjetosPython\LoterIas\Estrategias\MegaSena\PalpitesMegaSena


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        20/02/2025     07:30                Requisitos
d-----        20/02/2025     07:30                static
d-----        20/02/2025     10:08                templates
d-----        20/02/2025     07:31                venv-pypy
d-----        20/02/2025     08:05                venv
------        20/02/2025     07:30             92 .hintrc
------        20/02/2025     07:30           1096 LICENSE
------        20/02/2025     07:30            932 PalpitesMegaSena.ps1
------        20/02/2025     07:30             18 README.md
------        20/02/2025     07:30           8446 app-proxy.py
------        20/02/2025     09:13           9967 app.py
------        20/02/2025     07:30           4886 requirements-cpython.txt
------        20/02/2025     07:30           4886 requirements-pypy.txt
------        20/02/2025     07:30           5040 requirements.txt


# Flask==3.1.0
# requests==2.32.3
# pandas==2.2.3
# openpyxl==3.1.5
aiohappyeyeballs>=2.4.4
aiohttp>=3.11.11
aiosignal>=1.3.2
annotated-types>=0.7.0
anyio>=4.4.0
app>=0.0.1
argon2-cffi>=23.1.0
argon2-cffi-bindings>=21.2.0
arrow>=1.3.0
asttokens>=2.4.1
async-lru>=2.0.4
asyncio>=3.4.3
attrs>=23.2.0
Babel>=2.15.0
beautifulsoup4>=4.12.3
bleach>=6.1.0
blinker>=1.9.0
build>=1.2.2.post1
certifi>=2024.7.4
charset-normalizer>=3.4.1
click>=8.1.7
colorama>=0.4.6
comm>=0.2.2
Cython>=3.0.11
decorator>=5.1.1
defusedxml>=0.7.1
et_xmlfile>=2.0.0
executing>=2.0.1
fastapi>=0.115.6
fastjsonschema>=2.20.0
Flask>=2.0.1
Flask-Cors>=5.0.0
Flask-Login>=0.6.3
Flask-Mail>=0.10.0
Flask-SQLAlchemy>=3.1.1
fqdn>=1.5.1
frozenlist>=1.5.0
h11>=0.14.0
httpcore>=1.0.5
httpx>=0.27.0
idna>=3.7
ipykernel>=6.29.5
ipython>=8.26.0
isoduration>=20.11.0
itsdangerous>=2.2.0
jedi>=0.19.1
Jinja2>=3.1.4
json5>=0.9.25
jsonpointer>=3.0.0
jsonschema>=4.23.0
jsonschema-specifications>=2023.12.1
jupyter-events>=0.10.0
jupyter-lsp>=2.2.5
jupyter_client>=8.6.2
jupyter_core>=5.7.2
jupyter_server>=2.14.2
jupyter_server_terminals>=0.5.3
jupyterlab>=4.2.4
jupyterlab_pygments>=0.3.0
jupyterlab_server>=2.27.3
MarkupSafe>=3.0.2
matplotlib-inline>=0.1.7
mistune>=3.0.2
mpmath>=1.3.0
multidict>=6.1.0
nbclient>=0.10.0
nbconvert>=7.16.4
nbformat>=5.10.4
nest-asyncio>=1.6.0
notebook>=7.2.1
notebook_shim>=0.2.4
numpy>=2.2.1
openpyxl>=3.1.5
overrides>=7.7.0
packaging>=24.1
pandas>=2.2.3
pandocfilters>=1.5.1
parso>=0.8.4
pip-tools>=7.4.1
platformdirs>=4.2.2
prometheus_client>=0.20.0
prompt_toolkit>=3.0.47
propcache>=0.2.1
psutil>=6.0.0
pure-eval>=0.2.2
pycparser>=2.22
pydantic>=2.10.4
pydantic_core>=2.27.2
Pygments>=2.18.0
pyproject_hooks>=1.2.0
python-dateutil>=2.9.0.post0
python-dotenv>=0.19.0
python-json-logger>=2.0.7
python-multipart>=0.0.20
pytz>=2024.1
#pywin32>=308
redis>=5.2.1
referencing>=0.35.1
requests>=2.31.0
rfc3339-validator>=0.1.4
rfc3986-validator>=0.1.1
Send2Trash>=1.8.3
setuptools>=75.8.0
six>=1.16.0
sniffio>=1.3.1
soupsieve>=2.5
SQLAlchemy>=2.0.36
stack-data>=0.6.3
starlette>=0.41.3
sympy>=1.13.1
terminado>=0.18.1
tinycss2>=1.3.0
tornado>=6.4.1
traitlets>=5.14.3
types-python-dateutil>=2.9.0.20240316
typing_extensions>=4.12.2
tzdata>=2024.1
uri-template>=1.3.0
urllib3>=2.2.2
wcwidth>=0.2.13
webcolors>=24.6.0
webencodings>=0.5.1
websocket-client>=1.8.0
Werkzeug>=2.0.3
wheel>=0.45.1
yarl>=1.18.3




from flask import Flask, render_template, jsonify, request
import random
import os
import requests
import pandas as pd
import openpyxl
from datetime import datetime
import logging

# Configurar logging
logging.basicConfig(level=logging.DEBUG)

# APIs disponíveis
# API_BASE_URL = 'https://servicebus2.caixa.gov.br/portaldeloterias/api/megasena'  # API da Caixa
API_BASE_URL = 'https://loteriascaixa-api.herokuapp.com/api'  # API do Heroku

app = Flask(__name__)

def validate_numbers(numbers):
    """
    Valida os números fornecidos pelo usuário
    """
    numbers = [int(n) for n in numbers if n]
    
    if len(numbers) != 18:
        return False, "É necessário preencher todos os 18 números"
    
    if any(n < 1 or n > 60 for n in numbers):
        return False, "Todos os números devem estar entre 01 e 60"
    
    for i in range(0, len(numbers), 6):
        grupo = numbers[i:i+6]
        if len(grupo) != len(set(grupo)):
            return False, f"Números repetidos encontrados no jogo {(i//6)+1}"
    
    return True, ""

def create_games(numbers):
    """
    Cria os jogos mantendo a ordem original dos números
    """
    return [numbers[i:i+6] for i in range(0, len(numbers), 6)]

def modify_numbers(numbers, increment):
    """
    Modifica cada número conforme as regras da Mega Sena
    """
    modified = []
    for n in numbers:
        if increment > 0:
            new_n = min(n + 1, 60)
        else:
            new_n = max(n - 1, 1)
        modified.append(new_n)
    return modified

def create_random_combinations_from_plus_one(plus_one_games):
    """
    Cria 4 jogos aleatórios baseados exclusivamente nos Jogos +1
    """
    # Pega todos os números únicos dos jogos +1
    all_numbers = list(set([num for game in plus_one_games for num in game]))
    random_games = []
    
    # Gera 4 jogos aleatórios (1,2,3,4)
    for _ in range(4):
        game = sorted(random.sample(all_numbers, 6))
        random_games.append(game)
    
    return random_games

def create_games_from_original(original_games):
    """
    Cria jogos 5 e 6 baseados exclusivamente nos jogos originais 1,2,3
    """
    # Pega todos os números únicos dos jogos originais
    all_numbers = list(set([num for game in original_games for num in game]))
    additional_games = []
    
    # Gera 2 jogos adicionais (5 e 6)
    for _ in range(2):
        game = sorted(random.sample(all_numbers, 6))
        additional_games.append(game)
    
    return additional_games

def get_latest_result():
    """
    Busca o último resultado da Mega Sena via API configurada
    """
    try:
        response = requests.get(f'{API_BASE_URL}/megasena/latest')
        data = response.json()
        
        # Adaptação do formato de resposta dependendo da API
        if 'concurso' in data:  # Formato Heroku API
            return {
                'concurso': data['concurso'],
                'data': data['data'],
                'dezenas': data['dezenas'],
                'premiacoes': data.get('premiacoes', [])
            }
        else:  # Formato API Caixa
            return {
                'concurso': data['numero'],
                'data': data['dataApuracao'],
                'dezenas': data['listaDezenas'],
                'premiacoes': data['listaRateioPremio']
            }
    except Exception as e:
        logging.error(f"Erro ao buscar resultado: {str(e)}")
        return None

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/generate_games', methods=['POST'])
def generate_games():
    numbers = request.json.get('numbers', [])
    
    valid, message = validate_numbers(numbers)
    if not valid:
        return jsonify({'error': message}), 400
    
    numbers = [int(n) for n in numbers if n]
    
    # Gera os jogos originais
    original_games = create_games(numbers)
    
    # Gera os jogos +1 e -1
    plus_one = create_games(modify_numbers(numbers, 1))
    minus_one = create_games(modify_numbers(numbers, -1))
    
    # Gera os 4 primeiros jogos aleatórios baseados nos jogos +1
    random_games = create_random_combinations_from_plus_one(plus_one)
    
    # Gera os jogos 5 e 6 baseados nos jogos originais
    additional_games = create_games_from_original(original_games)
    
    # Combina todos os jogos aleatórios
    random_games.extend(additional_games)
    
    # Busca o último resultado
    latest_result = get_latest_result()
    
    return jsonify({
        'original_games': original_games,
        'plus_one_games': plus_one,
        'minus_one_games': minus_one,
        'random_games': random_games,
        'latest_result': latest_result
    })

@app.route('/check_result/<int:concurso>', methods=['GET'])
def check_result(concurso):
    """
    Busca o resultado de um concurso específico usando a API configurada
    """
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        # Construir URL baseada na API configurada
        if concurso > 0:
            url = f'{API_BASE_URL}/megasena/{concurso}'
        else:
            url = f'{API_BASE_URL}/megasena/latest'
            
        logging.debug(f"Acessando URL: {url}")
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code != 200:
            return jsonify({
                'error': f'Erro ao acessar API (Status {response.status_code})'
            }), response.status_code
            
        data = response.json()
        
        # Adaptação do formato de resposta dependendo da API
        if 'concurso' in data:  # Formato Heroku API
            resultado = {
                'numero': data['concurso'],
                'dataApuracao': data['data'],
                'listaDezenas': data['dezenas'],
                'dezenasSorteadasOrdemSorteio': data['dezenas'],
                'listaRateioPremio': data.get('premiacoes', []),
                'acumulado': data.get('acumulado', False),
                'valorAcumuladoProximoConcurso': data.get('valorAcumulado', 0),
                'dataProximoConcurso': data.get('dataProximo', ''),
                'valorEstimadoProximoConcurso': data.get('valorEstimado', 0),
                'valorArrecadado': data.get('arrecadacaoTotal', 0),
                'localSorteio': data.get('local', ''),
                'nomeMunicipioUFSorteio': data.get('cidade', '')
            }
        else:  # Formato API Caixa
            resultado = {
                'numero': data['numero'],
                'dataApuracao': data['dataApuracao'],
                'listaDezenas': data['listaDezenas'],
                'dezenasSorteadasOrdemSorteio': data['dezenasSorteadasOrdemSorteio'],
                'listaRateioPremio': data['listaRateioPremio'],
                'acumulado': data['acumulado'],
                'valorAcumuladoProximoConcurso': data['valorAcumuladoProximoConcurso'],
                'dataProximoConcurso': data['dataProximoConcurso'],
                'valorEstimadoProximoConcurso': data['valorEstimadoProximoConcurso'],
                'valorArrecadado': data['valorArrecadado'],
                'localSorteio': data['localSorteio'],
                'nomeMunicipioUFSorteio': data['nomeMunicipioUFSorteio']
            }
        
        return jsonify(resultado)
        
    except requests.exceptions.Timeout:
        return jsonify({'error': 'Timeout ao acessar API'}), 504
    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'Erro na requisição: {str(e)}'}), 500
    except Exception as e:
        return jsonify({'error': f'Erro inesperado: {str(e)}'}), 500

@app.route('/export/<format>', methods=['POST'])
def export_games(format):
    """
    Exporta os jogos nos formatos solicitados
    """
    games = request.json
    
    if format == 'txt':
        content = "PALPITES MEGA SENA\n\n"
        for game_type, game_list in games.items():
            content += f"{game_type.upper()}\n"
            for game in game_list:
                content += " - ".join(str(num).zfill(2) for num in game) + "\n"
            content += "\n"
        
        return jsonify({
            'content': content,
            'filename': 'palpites_mega_sena.txt'
        })
    
    elif format == 'html':
        html_content = """
        <html>
        <head>
            <title>Palpites Mega Sena</title>
            <style>
                body { font-family: Arial; }
                .game { margin: 10px; }
            </style>
        </head>
        <body>
            <h1>Palpites Mega Sena</h1>
        """
        
        for game_type, game_list in games.items():
            html_content += f"<h2>{game_type}</h2>"
            for game in game_list:
                numbers = " - ".join(str(num).zfill(2) for num in game)
                html_content += f'<div class="game">{numbers}</div>'
        
        html_content += "</body></html>"
        
        return jsonify({
            'content': html_content,
            'filename': 'palpites_mega_sena.html'
        })
    
    elif format == 'xlsx':
        # Cria um DataFrame para cada tipo de jogo
        dfs = {}
        for game_type, game_list in games.items():
            df = pd.DataFrame(game_list)
            df.columns = [f'Dezena {i+1}' for i in range(6)]
            dfs[game_type] = df
        
        return jsonify({
            'content': {sheet: df.to_dict('records') for sheet, df in dfs.items()},
            'filename': 'palpites_mega_sena.xlsx'
        })

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
	
	<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Palpites Mega Sena</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Gerador de Palpites - Mega Sena</h1>
        
        <div class="instrucaoes">
            <h1>Como usar:</h1>
            <ol> 
                    <li>Digite 18 números únicos entre 01 e 60</li>
                    <li>Os números serão validados automaticamente.</li>
                    <li>Após preencher O ULTIMO número, serão geradas as combinações:</li>
                    <li><span class="jogos-normais">Jogos Normais</span> <small><i>(seus números divididos em 3 jogos)</i></small></li>
                    <li><span class="jogos-mais-um">Jogos +1</span> <small><i>(cada número aumentado em uma unidade)</i></small></li>
                    <li><span class="jogos-menos-um">Jogos -1</span> <small><i>(cada número diminuído em uma unidade)</i></small></li>
                    <li><span class="jogos-aleatorios">Jogos Aleatórios</span> <small><i>(6 jogos baseados nas variações)</i></small></li>
                    <li>Você pode fazer o download dos jogos.</li>
                    <li>As dezenas que vc acertar podem serem destacadas caso vc insira o numero do concurso.</li>
                    <li>Vc pode conferir os três palpites <a href="https://palpitesms.onrender.com"  target="_blank">aqui</a>.</li>
            </ol>
        </div>
        <h2>Para apostar use os jogos gerados na sessão (Jogos Aleatórios)</h2>

        <div class="input-section">
            <h1>Digite 18 números <span><small>(01-60)</small></span>:</h1>
            <div class="number-inputs"></div>
        </div>

        <!--Adicione isto antes da div .results:-->
        <div class="concurso-checker">
            <input type="number" id="concurso-input" placeholder="Concurso" min="1">
            <button onclick="checkConcurso(document.getElementById('concurso-input').value)">
                Verificar Concurso
            </button>
        </div>


        <div class="results" style="display: none;">
            <h1>Seus Jogos</h1>
			
			
			<!-- Nova div para mostrar o resultado do sorteio -->
			<div class="sorteio-info" style="display: none;">
				<h3>Resultado do Concurso: <span id="concurso-numero"></span></h3>
				<div class="numeros-sorteados">
					<span>Números Sorteados:</span>
					<div id="dezenas-sorteadas" class="dezenas"></div>
				</div>
			</div>	
			
            
            <div class="games-section">
                <h3>Jogos Normais</h3>
                <div id="original-games" class="games-grid"></div>
            </div>

            <div class="games-section">
                <h3>Jogos <span style="color: green;">+1</span></h3>
                <div id="plus-one-games" class="games-grid"></div>
            </div>

            <div class="games-section">
                <h3>Jogos <span style="color: #cc6600;">-1</span></h3>
                <div id="minus-one-games" class="games-grid"></div>
            </div>

            <div class="games-section">
                <h3>Jogos Aleatórios</h3>
                <div id="random-games" class="games-grid"></div>
            </div>

            <div class="export-buttons">
                <button onclick="exportToTxt()">Exportar para TXT</button>
                <button onclick="exportToExcel()">Exportar para Excel</button>
                <!--Adicione isto na div .export-buttons:-->
                <button onclick="exportToFormat('html')">Exportar para HTML</button>
                 <!--<button onclick="exportToFormat('txt')">Exportar TXT</button>-->
            </div>



        </div>
    </div>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>

// Carrega o último resultado automaticamente ao iniciar
document.addEventListener('DOMContentLoaded', async () => {
    try {
        const response = await fetch('/check_result/0'); // 0 para pegar o último resultado
        const data = await response.json();
        
        if (data && !data.error) {
            const concurso = data.concurso;
            const dezenas = data.dezenas.map(d => parseInt(d, 10));
            
            // Preenche o input com o número do último concurso
            const input = document.getElementById('concurso-input');
            if (input) input.value = concurso;
            
            // Atualiza a interface com o resultado
            atualizarResultadoSorteio(data);
            highlightNumbers(dezenas);
        }
    } catch (error) {
        console.error('Erro ao carregar último resultado:', error);
    }
});
// Create input fields
document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.number-inputs');
    for (let i = 0; i < 18; i++) {
        const input = document.createElement('input');
        input.type = 'number';
        input.min = 1;
        input.max = 60;
        input.className = 'number-input';
        input.setAttribute('data-index', i);
        container.appendChild(input);
        
        // Add event listeners
        input.addEventListener('input', validateAndMove);
        input.addEventListener('keydown', handleBackspace);
    }
});

// Função para formatar número com zero à esquerda
function formatNumber(num) {
    return num.toString().padStart(2, '0');
}


// Função para validar input e mover para o próximo campo
function validateAndMove(event) {
    const input = event.target;
    const value = input.value.replace(/^0+/, ''); // Remove zeros à esquerda para validação
    const numValue = parseInt(value);
    const index = parseInt(input.getAttribute('data-index'));
    
    // Validar range (1-60)
    if (numValue < 1 || numValue > 60) {
        input.classList.add('error');
        return;
    }

    // Determinar a linha atual (0, 1 ou 2)
    const linha = Math.floor(index / 6);
    const inicioLinha = linha * 6;
    const fimLinha = inicioLinha + 5;
    
    // Pegar todos os inputs da linha atual
    const inputsDaLinha = Array.from(document.querySelectorAll('.number-input'))
        .slice(inicioLinha, fimLinha + 1);
    
    // Pegar números preenchidos na linha atual (excluindo o input atual)
    const numerosPreenchidos = inputsDaLinha
        .filter(inp => inp.value && inp !== input)
        .map(inp => parseInt(inp.value))
        .sort((a, b) => a - b);

    // Verificar se o número mantém a ordem crescente
    const menoresQueAtual = numerosPreenchidos.filter(n => n < numValue);
    const maioresQueAtual = numerosPreenchidos.filter(n => n > numValue);
    
    if (menoresQueAtual.length > 0 && maioresQueAtual.length > 0) {
        const maiorMenor = Math.max(...menoresQueAtual);
        const menorMaior = Math.min(...maioresQueAtual);
        
        if (numValue <= maiorMenor || numValue >= menorMaior) {
            input.classList.add('error');
            return;
        }
    }

    // Verificar duplicatas APENAS dentro do grupo atual
    const duplicadoNoGrupo = inputsDaLinha
        .filter(i => i !== input)
        .some(i => i.value && parseInt(i.value) === numValue);

    if (duplicadoNoGrupo) {
        input.classList.add('error');
        return;
    }

    input.classList.remove('error');

    // Formatar com zero à esquerda quando o input perde o foco
    input.addEventListener('blur', function() {
        if (this.value && !this.classList.contains('error')) {
            this.value = this.value.padStart(2, '0');
        }
    });

    // Mover para próximo input se tiver 2 dígitos
    if (input.value.length === 2 && index < 17) {
        const nextInput = document.querySelector(`[data-index="${index + 1}"]`);
        if (nextInput) nextInput.focus();
    }

    // Verificar se todos os inputs estão preenchidos e válidos
    if (areAllInputsFilled()) {
        generateGames();
    }
}

// Função para verificar se todos os inputs estão preenchidos
function areAllInputsFilled() {
    const inputs = document.querySelectorAll('.number-input');
    return Array.from(inputs).every(input => 
        input.value && !input.classList.contains('error'));
}

// Função para lidar com a tecla backspace
function handleBackspace(event) {
    if (event.key === 'Backspace' && !event.target.value) {
        const index = parseInt(event.target.getAttribute('data-index'));
        if (index > 0) {
            const prevInput = document.querySelector(`[data-index="${index - 1}"]`);
            prevInput.focus();
        }
    }
}
/*
// Criar os campos de input
document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.number-inputs');
    for (let i = 0; i < 18; i++) {
        const input = document.createElement('input');
        input.type = 'text';
        input.maxLength = 2;
        input.className = 'number-input';
        input.setAttribute('data-index', i);
        container.appendChild(input);
        
        // Adicionar event listeners
        input.addEventListener('input', validateAndMove);
        input.addEventListener('keydown', handleBackspace);
    }
});*/

// Handle backspace key
function handleBackspace(event) {
    if (event.key === 'Backspace' && !event.target.value) {
        const index = parseInt(event.target.getAttribute('data-index'));
        if (index > 0) {
            const prevInput = document.querySelector(`[data-index="${index - 1}"]`);
            prevInput.focus();
        }
    }
}

// Função para verificar se todos os inputs estão preenchidos
function areAllInputsFilled() {
    const inputs = document.querySelectorAll('.number-input');
    return Array.from(inputs).every(input => 
        input.value && !input.classList.contains('error'));
}

// Generate games
// Modifique a função generateGames para incluir a verificação do último resultado
async function generateGames() {
    const inputs = document.querySelectorAll('.number-input');
    const numbers = Array.from(inputs).map(input => parseInt(input.value));

    try {
        const response = await fetch('/generate_games', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ numbers }),
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json();
        displayGames(data);
        document.querySelector('.results').style.display = 'block';
        
        // Verifica o último resultado automaticamente
        if (data.latest_result) {
            highlightNumbers(data.latest_result.dezenas);
        }
    } catch (error) {
        console.error('Error:', error);
    }
}

// Display games in the UI
function displayGames(data) {
    displayGameSet('original-games', data.original_games, 'Jogo');
    displayGameSet('plus-one-games', data.plus_one_games, 'Jogo +1');
    displayGameSet('minus-one-games', data.minus_one_games, 'Jogo -1');
    displayGameSet('random-games', data.random_games, 'Jogo Aleatório');
}

// Display a set of games
function displayGameSet(containerId, games, prefix) {
    const container = document.getElementById(containerId);
    container.innerHTML = '';

    games.forEach((game, index) => {
        const gameCard = document.createElement('div');
        gameCard.className = 'game-card';

        const title = document.createElement('h4');
        title.className = `game-title ${containerId}-title`;
        title.textContent = `${prefix} ${index + 1}`;

        const numbers = document.createElement('div');
        numbers.className = 'game-numbers';
        numbers.textContent = game.map(n => n.toString().padStart(2, '0')).join(' ');

        gameCard.appendChild(title);
        gameCard.appendChild(numbers);
        container.appendChild(gameCard);
    });
}

// Export to TXT
function exportToTxt() {
    let content = 'PALPITES MEGA SENA\n\n';

    // Add original games
    content += 'JOGOS NORMAIS:\n';
    content = addGamesToContent(content, 'original-games');

    // Add +1 games
    content += '\nJOGOS +1:\n';
    content = addGamesToContent(content, 'plus-one-games');

    // Add -1 games
    content += '\nJOGOS -1:\n';
    content = addGamesToContent(content, 'minus-one-games');

    // Add random games
    content += '\nJOGOS ALEATÓRIOS:\n';
    content = addGamesToContent(content, 'random-games');

    // Create and trigger download
    downloadFile(content, 'palpites-mega-sena.txt', 'text/plain');
}

// Export to Excel format (CSV)
function exportToExcel() {
    let content = 'PALPITES MEGA SENA\n\n';

    // Add all game types
    content += 'Jogos Normais\n';
    content = addGamesToContent(content, 'original-games', true);

    content += '\nJogos +1\n';
    content = addGamesToContent(content, 'plus-one-games', true);

    content += '\nJogos -1\n';
    content = addGamesToContent(content, 'minus-one-games', true);

    content += '\nJogos Aleatórios\n';
    content = addGamesToContent(content, 'random-games', true);

    // Create and trigger download
    downloadFile(content, 'palpites-mega-sena.csv', 'text/csv');
}

// Helper function to add games to export content
function addGamesToContent(content, containerId, isExcel = false) {
    const container = document.getElementById(containerId);
    const gameCards = container.querySelectorAll('.game-card');

    gameCards.forEach(card => {
        const numbers = card.querySelector('.game-numbers').textContent;
        if (isExcel) {
            // Format for Excel: separate numbers with tabs
            content += numbers.split(' ').join('\t') + '\n';
        } else {
            // Format for TXT: keep space-separated
            content += numbers + '\n';
        }
    });
    
    return content;
}

// Helper function to download file
function downloadFile(content, filename, type) {
    const blob = new Blob([content], { type: type });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
}

// Função para verificar resultado específico
async function checkConcurso(numero) {
    console.log('Verificando concurso:', numero);
    
    const sorteioInfo = document.querySelector('.sorteio-info');
    sorteioInfo.style.display = 'block';
    sorteioInfo.innerHTML = `
        <div class="loading">
            <p>Carregando resultado do concurso ${numero}...</p>
        </div>
    `;

    try {
        const response = await fetch(`/check_result/${numero}`);
        console.log('Status da resposta:', response.status);
        
        if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
        }

        const data = await response.json();
        console.log('Dados recebidos:', data);

        if (data.error) {
            throw new Error(data.error);
        }

        // Atualiza a interface
        atualizarResultadoSorteio(data);
        
        // Aplica destaque nos números
        if (data.listaDezenas) {
            const dezenasSorteadas = data.listaDezenas.map(d => parseInt(d, 10));
            highlightNumbers(dezenasSorteadas);
        }

    } catch (error) {
        console.error('Erro:', error);
        sorteioInfo.innerHTML = `
            <div class="error-message">
                <p>Não foi possível carregar o resultado do concurso ${numero}</p>
                <p>Erro: ${error.message}</p>
                <button onclick="checkConcurso(${numero})" class="retry-button">
                    Tentar Novamente
                </button>
            </div>
        `;
    }
}

// Função para atualizar o resultado do sorteio
function atualizarResultadoSorteio(data) {
    const sorteioInfo = document.querySelector('.sorteio-info');
    
    // Formata valores monetários
    const formatMoney = (value) => {
        return value.toLocaleString('pt-BR', {
            style: 'currency',
            currency: 'BRL'
        });
    };

    // Template com todas as informações
    sorteioInfo.innerHTML = `
        <div class="resultado-container">
            <h3>Resultado do Concurso: ${data.numero}</h3>
            <p class="data-sorteio">Data do Sorteio: ${data.dataApuracao}</p>
            <p class="local-sorteio">Local: ${data.localSorteio} - ${data.nomeMunicipioUFSorteio}</p>
            
            <div class="numeros-sorteados">
                <h4>Números por Ordem de Sorteio:</h4>
                <div class="dezenas">
                    ${data.dezenasSorteadasOrdemSorteio.map(num => 
                        `<div class="dezena">${num.toString().padStart(2, '0')}</div>`
                    ).join('')}
                </div>
                
                <h4>Números em Ordem Crescente:</h4>
                <div class="dezenas">
                    ${data.listaDezenas.map(num => 
                        `<div class="dezena">${num.toString().padStart(2, '0')}</div>`
                    ).join('')}
                </div>
            </div>
            
            <div class="premiacoes">
                <h4>Premiações:</h4>
                ${data.listaRateioPremio.map(premio => `
                    <div class="premio-item">
                        <span class="faixa">${premio.descricaoFaixa}</span>
                        <span class="ganhadores">${premio.numeroDeGanhadores} 
                            ${premio.numeroDeGanhadores === 1 ? 'ganhador' : 'ganhadores'}</span>
                        <span class="valor">${formatMoney(premio.valorPremio)}</span>
                    </div>
                `).join('')}
            </div>
            
            <div class="arrecadacao">
                <h4>Informações Adicionais:</h4>
                <p>Valor Arrecadado: ${formatMoney(data.valorArrecadado)}</p>
            </div>
            
            <div class="proximo-concurso">
                <h4>Próximo Concurso:</h4>
                ${data.dataProximoConcurso ? 
                    `<p>Data: ${data.dataProximoConcurso}</p>` : ''}
                ${data.acumulado ? 
                    `<p class="acumulado">ACUMULOU!</p>
                     <p>Valor Acumulado: ${formatMoney(data.valorAcumuladoProximoConcurso)}</p>` : 
                    ''}
                ${data.valorEstimadoProximoConcurso > 0 ?
                    `<p>Prêmio Estimado: ${formatMoney(data.valorEstimadoProximoConcurso)}</p>` : 
                    ''}
            </div>
        </div>
    `;
}

// Função para destacar números nos jogos
function highlightNumbers(dezenasSorteadas) {
    console.log('Destacando números:', dezenasSorteadas);
    
    if (!dezenasSorteadas || !Array.isArray(dezenasSorteadas)) {
        console.error('Dezenas inválidas:', dezenasSorteadas);
        return;
    }

    // Remove destaques anteriores
    document.querySelectorAll('.number-highlight').forEach(span => {
        const text = span.textContent;
        span.replaceWith(text);
    });

    // Destaca os números em todos os jogos
    document.querySelectorAll('.game-numbers').forEach(gameDiv => {
        const numbersText = gameDiv.textContent;
        const numbers = numbersText.split(' ').map(n => n.trim());
        
        const newContent = numbers.map(num => {
            const number = parseInt(num, 10);
            if (dezenasSorteadas.includes(number)) {
                return `<span class="number-highlight">${num}</span>`;
            }
            return num;
        }).join(' ');
        
        gameDiv.innerHTML = newContent;
    });
}



// Função para destacar números
function highlightNumbers(dezenasSorteadas) {
    console.log('Destacando números:', dezenasSorteadas);
    
    if (!dezenasSorteadas || !Array.isArray(dezenasSorteadas)) {
        console.error('Dezenas inválidas:', dezenasSorteadas);
        return;
    }

    // Remove destaques anteriores
    document.querySelectorAll('.number-highlight').forEach(span => {
        const text = span.textContent;
        span.replaceWith(text);
    });

    // Destaca os números em todos os jogos
    document.querySelectorAll('.game-numbers').forEach(gameDiv => {
        const numbersText = gameDiv.textContent;
        const numbers = numbersText.split(' ').map(n => n.trim());
        
        // Cria o novo conteúdo com os números destacados
        const newContent = numbers.map(num => {
            const number = parseInt(num, 10);
            if (dezenasSorteadas.includes(number)) {
                return `<span class="number-highlight">${num}</span>`;
            }
            return num;
        }).join(' ');
        
        gameDiv.innerHTML = newContent;
    });
}
// Funções de exportação
async function exportToFormat(format) {
    const games = {
        'Jogos Originais': getGamesFromContainer('original-games'),
        'Jogos +1': getGamesFromContainer('plus-one-games'),
        'Jogos -1': getGamesFromContainer('minus-one-games'),
        'Jogos Aleatórios': getGamesFromContainer('random-games')
    };

    try {
        const response = await fetch(`/export/${format}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(games)
        });

        const data = await response.json();
        
        if (format === 'xlsx') {
            // Para XLSX, usamos uma biblioteca específica
            const wb = XLSX.utils.book_new();
            Object.entries(data.content).forEach(([sheetName, rows]) => {
                const ws = XLSX.utils.json_to_sheet(rows);
                XLSX.utils.book_append_sheet(wb, ws, sheetName);
            });
            XLSX.writeFile(wb, data.filename);
        } else {
            // Para TXT e HTML
            const blob = new Blob([data.content], { 
                type: format === 'txt' ? 'text/plain' : 'text/html' 
            });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = data.filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }
    } catch (error) {
        console.error('Erro na exportação:', error);
    }
}

// Função auxiliar para pegar jogos de um container
function getGamesFromContainer(containerId) {
    const container = document.getElementById(containerId);
    return Array.from(container.querySelectorAll('.game-numbers'))
        .map(div => div.textContent.split(' ').map(Number));
}

/* Reset e configurações base */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 10px;
    background-color: #f0f0f0;
}

/* Container principal com responsividade */
.container {
    max-width: 1200px;
    margin: 0 auto;
    background-color: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.jogos-normais {
    color: #008000;
    font-weight: bold ;
}

.jogos-mais-um {
    color: #cc6600;
    font-weight: bold ;
}

.jogos-menos-um {
    color: #0066cc;
    font-weight: bold ;
}

.jogos-aleatorios {
    color: #000000;
    font-weight: bold ;
}

/* Títulos centralizados */
h1, h2, h3, h4 {
    text-align: center;
    margin: 15px 0;
}
h2{
    color:#ff0000;
}

.container, instrucaoes {
    background-color: #f9f9f9;
    border-radius: 12px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 20px;
    text-align: left;
    font-family: Arial, sans-serif;
    color: #333;
    line-height: 35px;
}

/* Atualização: Grade de inputs responsiva fixada em 6x3 */
.number-inputs {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    grid-template-rows: repeat(3, 1fr);
    gap: 8px;
    margin: 15px 0;
}

/* Removidas media queries que alteravam a estrutura da grid */

/* Estilo dos inputs */
.number-input {
    width: 100%;
    height: 45px;
    text-align: center;
    font-size: 18px;
    border: 2px solid #ddd;
    border-radius: 4px;
    padding: 5px;
}

.number-input.error {
    border-color: #ff0000;
    background-color: #ffe6e6;
}

/* Seções de jogos */
.games-section {
    margin: 20px 0;
    padding: 15px;
    border-radius: 8px;
}

/* Estilos para diferentes tipos de jogos */
.games-section:nth-of-type(1) {
    background-color: #e6f3ff;
}
.games-section:nth-of-type(1) h3 {
    color: #0066cc;
}
.games-section:nth-of-type(1) .game-numbers {
    color: #0066cc;
}

.games-section:nth-of-type(2) {
    background-color: #e6ffe6;
}
.games-section:nth-of-type(2) h3 {
    color: #008000;
}
.games-section:nth-of-type(2) .game-numbers {
    color: #008000;
}

.games-section:nth-of-type(3) {
    background-color: #fff2e6;
}
.games-section:nth-of-type(3) h3 {
    color: #cc6600;
}
.games-section:nth-of-type(3) .game-numbers {
    color: #cc6600;
}

.games-section:nth-of-type(4) {
    background-color: #e6f3ff;
}
.games-section:nth-of-type(4) h3 {
    color: #0066cc;
}
.games-section:nth-of-type(4) .game-numbers {
    color: #0066cc;
}

/* Grid de jogos responsivo */
.games-grid {
    display: grid;
    gap: 15px;
    margin: 15px 0;
}
/* Adicione estes estilos ao seu CSS existente */

.concurso-checker {
    margin: 20px 0;
    text-align: center;
}

.concurso-checker input {
    padding: 8px;
    margin-right: 10px;
    width: 150px;
}

.highlighted {
    background-color: #ffeb3b;
    transition: background-color 0.3s ease;
}

.export-buttons {
    display: flex;
    gap: 10px;
    justify-content: center;
    margin: 20px 0;
}

.export-buttons button {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.export-buttons button:hover {
    opacity: 0.9;
}
/* Estilo para os números destacados */
/* Estilo melhorado para números destacados */
.number-highlight {
    background-color: #ffeb3b;
    padding: 2px 6px;
    border-radius: 4px;
    display: inline-block;
    margin: 0 2px;
    font-weight: bold;
    color: #000;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
}

.number-highlight:hover {
    background-color: #ffd700;
    transform: scale(1.1);
}
/* Estilos para a seção de resultado do sorteio */
.sorteio-info {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin: 20px 0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.numeros-sorteados {
    margin-top: 10px;
}

.dezenas {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    justify-content: center;
    margin: 15px 0;
}

.dezena {
    background-color: #0066cc;
    color: white;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.2em;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}
.premiacoes {
    margin-top: 20px;
    padding: 15px;
    background-color: white;
    border-radius: 6px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}



.premiacoes h4 {
    color: #0066cc;
    margin-bottom: 10px;
}

.premiacoes p {
    margin: 5px 0;
    padding: 5px 0;
    border-bottom: 1px solid #eee;


    
}
@media (min-width: 768px) {
    .games-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (min-width: 1024px) {
    .games-grid {
        grid-template-columns: repeat(3, 1fr);
    }
}

/* Cards dos jogos */
.game-card {
    background-color: white;
    padding: 15px;
    border-radius: 4px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Números dos jogos */
.game-numbers {
    font-size: 1.2em;
    font-weight: bold;
    color: #0066cc;
    padding: 10px;
    letter-spacing: 2px;
}

/* Botões de exportação */
.export-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    justify-content: center;
    margin: 20px 0;
}

button {
    padding: 12px 24px;
    background-color: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #0052a3;
}

/* Mensagens de erro */
.error-message {
    color: #721c24;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    padding: 15px;
    border-radius: 4px;
    margin: 10px 0;
}

/* Media Query para telas muito pequenas */
@media (max-width: 320px) {
    body {
        padding: 5px;
    }
    
    .container {
        padding: 10px;
    }
    
    h1 {
        font-size: 1.5em;
    }
    
    h2 {
        font-size: 1.3em;
    }
    
    h3 {
        font-size: 1.1em;
    }
    
    .number-input {
        height: 40px;
        font-size: 16px;
    }

    button {
        padding: 8px 16px;
        font-size: 14px;
        width: 100%;
    }
}

/* Media Query para telas muito grandes */
@media (min-width: 1920px) {
    .container {
        max-width: 1800px;
    }
    
    body {
        font-size: 18px;
    }
    
    .number-input {
        height: 60px;
        font-size: 24px;
    }
    
    .game-numbers {
        font-size: 1.5em;
    }
    
    button {
        padding: 15px 30px;
        font-size: 20px;
    }
}
